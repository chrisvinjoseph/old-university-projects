
Running Files:
	Run all python files using python3.
	E.G.
		"python3 filename.py"
			OR
		"python filename.py" (if python command runs python3 by default)

The program:
	This program simulates a key exchange between Alice (A) and Bob (B). This is done by using the sockets library in 
	python to set up a server (Alice) and client (Bob). The server and client will not interact in any way other 
	than over a network connection i.e. they will not interact with each other through any sort of file manipulation etc. 
	The key establishment goes as follows:

	B -> A: "Bob", NB (where NB is a 128-bit randomly generated nonce)
	A -> B: "Alice", pk, NA (where NA is a 128-bit randomly generated nonce and pk is Alice's public key)
	B -> A: ciphertext = PKE(PW, K) (where PKE() is encryption using Alice's public key, PW is Bob's hashed password 
	and K is a random session key generated by Bob)
	A -> B: "Connection Okay"/"Connection Failed" (Depending on whether Alice was able to successfully 
	decrypt the ciphertext using her private key and Bob was able to successfully log in)

	After these parameters are established, the shared secret key (ssk) is generated as follows:
		ssk = SHA-1(K, NB, NA)

	If all parameters were established successfully, both entities should have the same ssk value.

How to Run:
	To run the solution, first run the "key_setup.py" file.
	This file will create public and private keys for Alice along with
	a public key fingerprint for Bob. Upon recieving Alice's public key,
	Bob will use this fingerprint to ensure that Alice is who she claims
	to be.

	Then, run a terminal from both the Alice and Bob directories.
	Run "host.py" and "client.py" from Alice's terminal and Bob's terminal
	respectively.

	I've hard-coded Bob's password to be "abcd".

Very important note:
	1. The nonce values being shared like this is not secure. They should be shared as the result of 
	exponentiation i.e. Bob sends Alice r^NB instead of NB directly where r is some arbitrary 
	large value. The current method used provides forward secrecy but does not prevent a third 
	party from capturing the nonce values.

	2. This exchange provides no assurance of authentication i.e. Bob can not be 
	reasonably assured that he is talking to Alice and vice versa.

Less important note: 
	I have included a variable at the top of both "host.py" and "client.py" files called "debug". Set this boolean to 
	True in order to see debug messages that will indicate what is happening in the program. 
	This includes but is not limited to:
	- Messages recieved
	- SSK parameters being generated and recieved
	- Connection status
	- etc.

